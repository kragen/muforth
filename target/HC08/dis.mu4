( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2009 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

( Freescale HC08 disassembler.)

cr " HC08 disassembler " file[#

forth
hex

comment
==========================================================================
Since the opcode map is largely a simple matrix - with opcodes (such as
"and") as rows and addressing modes (0,x eg) as columns, it makes sense to
decide first whether we want the output to be prefix or postfix.

If prefix, then we should dispatch on the row (opcode) so we can print it
first. If postfix, then we should dispatch by column instead.

I'm thinking it would be interesting - since all my other disassemblers
have been prefix - to be true of Forth and try to make this one postfix
instead.
==========================================================================

( Choosing strings to display.)
( choose compiles the following two tokens as strings. At runtime, it
  chooses a string to display: the first, if top is zero; the second,
  otherwise.)

( 4" is used to print a 4-char substring. At compile time the whole string
  is compiled. At runtime, the index on the stack is scaled by 4 and used
  to index into the string; a 4-char substring is printed.)

( zero chooses first string; non-zero, the second.)
: (choose")  ( f a1 a2)  rot if  swap  then  drop  (.") ;
: (4")  ( - index z")  swap 2 << +  4 type space ;
compiler
: choose  ( choose string)  token, literal  token, literal   \ (choose") ;
: 4"  \ z"  \ (4") ;
forth

variable in
: b  ( a offset - a byte)  ( fetch byte of instruction)  over +  |c@ ;
: w  ( a offset - a word)  ( fetch word of instruction)  over +  |@ ;

: op  0 b ;
: row  ( a - a row)  op       0f and ;
: col  ( a - a col)  op 4 u>> 0f and ;
: pre  ( a - a f)    dup if  -1 b  9e =  ^ then  0 ;

( display machine code)
( a000  9ee0 04
  a003    d0 7000
  a006    44
  a007    08 40 fc)
: .p  ( padding)  7 spaces ;
: .b  ( hex byte and follwing padding)  1 b  .h8  5 spaces ;
: .w  ( hex word and following padding) 1 w  .hcell  3 spaces ;
: .2b  ( two hex bytes and padding)  1 b .h8 space  2 b .h8  2 spaces ;

: sadjust  ( a off - a off') ( adjust for s)  over pre nip if 1- then ;
: ireg  space  pre choose ,x ,s  space ;
: _imm  1 b .h8 ."  # " ;
: _dir  ( a offset - a)  ( direct addr)  b .h8 ."  ) " ;

      ( hex   text)
: imm   .b    _imm  1 ;
: dir   .b    1  _dir  1 ;
: ext   .w    ( extended addr)  1 w  .hcell  ."  ) "  2 ;
: .a    .p    ." .a "  0 ;
: .x    .p    ." .x "  0 ;
: ix1   .b    ( indexed 1 byte offset)  1 b  sadjust  .h8  ireg  1 ;
: ix2   .w    ( indexed 2 byte offset)  1 w  sadjust  .hcell  ireg  2 ;
: ix    .p    ." 0 ,x "  0 ;

( Sign extend byte to host cell.)
: sext   ( b - n)  dup 80 and if -100 + then ;

( Fetches the rel8 offset and calculates the destination address.)
: >dest  ( a offset-to-rel8 - a dest)  over + op ( a a+off rel8)  sext + 1+ ;

: set/clr  op 1 and  choose set clr ;
: .dirbit#  1 _dir  row u2/ ( bit#) .h8 space ;
: .brbit ( a - a extra)
   ( hex)  .2b
   ( text)  2 >dest .hcell space  .dirbit#
   ." br"  set/clr  2 ;

: .bit ( a - a extra)
   ( hex)  .b   ( text)  .dirbit#   ." b"  set/clr  1 ;

: _bra
   ( hex) .b
   ( text) 1 >dest .hcell space ;

: .bcond2  ( a - a extra)
   _bra
   row 4" bra brn bhi bls bcc bcs bne beq bhccbhcsbpl bmi bmc bms bil bih "
   1 ;

: .bcond9  ( a - a extra)
   _bra
   row 4" bge blt bgt ble "
   1 ;

( display effective address as a string)
: 1ea  ( a - a extra)  col 3 - jump
   ( 30   40   50   60   70)
    dir   .a   .x  ix1   ix   [

: 2ea  ( a - a extra)  col 0a - jump
   ( a0   b0   c0   d0   e0   f0)
    imm  dir  ext  ix2  ix1   ix   [

: _ix+  ." ,ix+ " ;
: .mov-dir-dir  ( hex) .2b   ( text) 1 _dir  2 _dir   2 ^ ;
: .mov-dir-ix+  ( hex)  .b   ( text) 1 _dir  _ix+     1 ^ ;
: .mov-imm-dir  ( hex) .2b   ( text) _imm    2 _dir   2 ^ ;
: .mov-imm-ix+  ( hex)  .b   ( text) _imm    _ix+     1 ^ ;

: .mov  ( a - a extra)  col 04 - jump
   .mov-dir-dir  .mov-dir-ix+  .mov-imm-dir  .mov-imm-ix+   [

: .1op  ( a - a extra)
   row 2 = if ( special) ^ then
   row 5 = if ( spec) ^ then
   row 0e = if  .mov ( special)  ." mov" ^ then
   1ea  ( a extra)  swap
   row 4" neg cne?--- com lsr --- ror asr lsl rol dec dcz?inc tst mov clr "
   swap ;

: .2op  ( a - a extra)  2ea  ( a extra)  swap
   row 4" sub cmp sbc cpx and bit lda sta eor adc ora add jmp jsr ldx stx "
   swap ;

: .inh8  ( a - a extra)
   .p ( we've already printed the opcode)
   row 4" rti rts --- swi tap tpa pulapshapulxpshxpulhpshhclrh--- stopwait"
   0 ;

: .col9  ( a - a extra)
   row 4 u< if  .bcond9 ^ then
   .p ( we've already printed the opcode)
   row 4 - 4" txs tsx --- tax clc sec cli sei rsp nop PRE txa "
   0 ;

: dispatch ( a - a extra)  col
   dup 0 =  if drop .brbit ^ then
   dup 1 =  if drop .bit ^ then
   dup 2 =  if drop .bcond2 ^ then
   dup 8 u< if drop .1op ^ then
   dup 8 =  if drop .inh8 ^ then
   dup 9 =  if drop .col9 ^ then
   ( column 0a is special: ais, aix, bsr need to be treated first, then 2op)
               drop .2op ;

( Skipped is 1 if prefix byte found, 0 otherwise.)
: .pre  ( a - skipped a' op)
   0 b  ( fetch op)
   dup 9e = if ( extension byte)  .h8  1+  1 swap ( skipped)  0 b  ^  then
   2 spaces  0 -rot ( skipped) ;

( This word is a bit complicated because we need to do two things that
  interact: skip forward to the next instruction - offset is extra+1 - and
  record the negative offset _from_ the next instruction _back_ to this
  one. If not for how we handle the prefix byte, these offsets would be
  equal - and opposite. Instead the backwards skip is sometime bigger by
  one: when we have skipped a prefix byte. .pre tells us this, by tucking a
  "skipped" count under the address.)

: _1dis  ( a - back anext)
   .pre .h8 space  dispatch  ( skipped a extra) 1+ ( fwd)  push
   ( skipped a)  swap r@ + negate ( back) swap  ( back a)  pop + ;

( The workhorse.)
: 1dis  ( a - a ea)
   dup .addr  .nesting  _1dis ;

: d  1dis ;

' 1dis '1dis !  ( for mode switching)
' -1   '1see !  ( quits)

( Interactive)
: dis  ( |a - |a+)  ['] 1dis  cell  inspect  ;

#]file

