( This file is part of muFORTH: http://muforth.nimblemachines.com/

  Copyright 2002-2009 David Frech. All rights reserved, and all wrongs
  reversed. (See the file COPYRIGHT for details.)

( I want to use the bootloader on my MC908QB8 chips to bootstrap my 9S08
  chips. This is support for talking to the ROM monitor/bootloader resident
  on all 908 microcontrollers.)

cr " HC08 Bootloader "  file[#

( Open target serial port.)
z" /dev/ttyS0" r/w  open-file  constant fd-target

( Set to raw?)
fd-target target-raw

: bps   ( speed)
   fd-target ram get-termios drop ( returns size of struct)
    ( speed) ram set-termios-speed
   fd-target ram set-termios ;

( For HC08 devices, use 9600.)
9600 bps
-- 1000000000 9600 / constant bit-time ( ns)
-- : pause  0 bit-time 4 *  nanosleep ;

( Spying on the protocol.)
variable spy  spy off

( Hex output, from lib/see.mu4)
: .h8_   .h8 space ;
: .hcell_  .hcell space ;

( Recv from, send to target.)
: _send  fd-target >emit ;
: recv   fd-target <key  spy @ if dup .h8_ then ;

( The hardware we're using means that we should recv sent chars _twice_ -
  once because of hardware loopback, and again because the target is
  - hopefully - echoing them.)
: expect  ( ch)  "0ff and  push ( expected)
   spy @ if  cr ." expected " r@ .h8_ r@ .  ." received "  then
   recv recv ( loopback, target)
   r@ =  swap pop = and if ^ then  error"  - mismatch" ;

: send  ( byte -)  ( Send a byte, read back echoed and verify)
   dup _send  expect ;

( Flush anything that's sitting in our input queue.)
: _flush  begin  recv .h8_  again ;  ( recv will timeout and throw)
: flush  ['] _flush carefully ;

hex
: breakCheck  recv 0= if ." (break received)" then ;
: security  ( send 8 security bytes, initally FF)  8 for  0ff send  next
   breakCheck ( target sends break after security bytes recvd) ;

: >lohi  ( w - lo hi)  dup 0ff and  swap 8 u>> ;
: hilo>  ( hi lo - w)  swap  8 << or ;
: addr>  ( a)  >lohi send send ;

( Target monitor commands.)
comment
==========================================================================
READ:   Send 4a addrhi addrlo, recv byte; target sets index ptr to addr+1
WRITE:  Send 49 addrhi addrlo  data; target sets index ptr to addr+1
IREAD:  Send 1a, recv two bytes; target increments index ptr by 2
IWRITE: Send 19 byte; target increments index ptr by 1
READSP: Send 0c, recv sphi splo
RUN:    Send 28
==========================================================================
: tgRead    ( a - byte)  4a send  addr>  recv ;
: tgWrite   ( byte a)    49 send  addr>  send ;
: tgIread   ( - b0 b1)   1a send  recv recv ;
: tgIwrite  ( byte -)    19 send  send ;
: tgReadSp  ( - sp)      0c send  recv recv  hilo> ;
: tgRun                  28 send  breakCheck ;
  ( target _seems_ to send a 00 or break when code that has been run
  returns to the ROM monitor. This is undocumented behaviour.)
decimal

comment
==========================================================================
  The operations available in the 908 bootloader are a bit odd. It is not
  possible, easily, to read two bytes from an arbitrary location. Instead,
  one sends the Read command, which sets the address, and returns one byte.
  It also increments the on-chip indexing pointer.

  If you now execute the Iread command, you'll read two more bytes. What do
  you do with the third? You could just chuck it out, but you might need it
  later, and you've got it already. So why not cache it somehow?

  I thought of several ways of doing this, and considered two of them worth
  trying out. I coded them both up, in completely different styles - first
  Variation A, then B - then I realised that they were quite similar, and
  refactored them to be in every way parallels. Then, using a simple
  textual method - one of the words A and B is the line comment character,
  and the other is a no-op - you choose which - I interleaved the
  implementations to make both the similarities and differences more
  apparent. Some subtle differences show up clearly, such as the fact that
  Var A always executes its "fetch from cache" code, and sometimes refills
  the cache first; whereas Var B either returns the _single_ byte in the
  cache, _or_ does a refill that also yields the byte requested.

  Variation A

  When we read from the target, always read two bytes, starting from an
  even address. Read the first two using tgRead; then, for sequential
  access after that, use tgIread, which returns two bytes. Keep a buffer
  two bytes long that contains the last two bytes read; taddr contains the
  address in the target's indexed memory pointer; it thus contains the
  address two byte _past_ the address of the first byte in the cache.

  Using A#2 to represent A truncated to a multiple of two (A and -2), if an
  address A#2 matches (taddr-2), then the byte it points to in the target
  memory is already in the cache.

  Note again that after the cache is filled the chip's indexed read & write
  pointer will be pointing just _after_ the cache, and taddr will point
  there as well.

  Variation B

  This time, just cache _one_ byte. If reading an arbitrary location, do a
  Read, and also cache that byte. If doing a sequential (indexed) read, do
  Iread - which returns two bytes - and return the first but cache the
  second.

  As in the above method, taddr follows the chip's indexed addr exactly,
  but in this case the byte cached is always at address taddr-1.

  Also note: unlike in the above case, when we refill the cache, we're
  really storing a remainder there. Thus we don't always read valid data
  out of the cache, refilling beforehand as necessary. Instead the
  read-and-refill routine returns the valid read value, and "behind the
  scenes" stocks the leftovers in the fridge.

  This approach is pretty good, but fails to be optimal in one case. If the
  address requested is taddr+1 - perfectly in the range of _one_ tgIread
  operation - it will use tgRead instead. The above approach - with a 2
  byte cache and modulo addressing, can use tgIread instead.

  For the hell of it, I'm using a metaphor of beer, beer runs, and fridges.
  Beers are bytes, fridge is the cache, a beer run is a "cache line" fetch.

  Variation C?

  A third variation is easy to conceive. In this case, you cache the
  results of the last read. Read caches one byte; Iread caches two. taddr
  points just past the cache, as before. A count is kept of valid bytes.
  Given an address A, if (A u< taddr) and (A u>= taddr-count), then A
  points to valid cached data.

  I haven't implemented this, but it might be worth trying.

  Cache invalidation

  Note that the chip's bootloader also implements both Write and Iwrite
  (indexed write) commands. Iread and Iwrite share the same pointer, and
  we'd like to take advantage of this. Also, since my focus here is
  simplicity and not performance, I'm not doing any exciting write-back or
  write-through stuff. Instead, any write to memory invalidates the cache.
  However, this does not affect the possibility the Iwrite could use a
  previous read's address, or vice versa.
==========================================================================

variable tsp    ( target's SP)
variable taddr  ( current address for the bootloader's indexed write and
                  read commands)
taddr off

( One of the following words - the empty one - is a no-op, so lines
  starting with it will be parsed. The other - with -- - comments out the
  rest of the line. Move the slashes to choose a Variation that suits you!)

compiler
: A  \ -- ;
: B       ;
forth
: A  \ A ;
: B  \ B ;

variable fridge  ( holds leftovers from tgRead or tgIread)
variable fridgeFull  ( optimistic)  fridgeFull off

: +wrap  ( a n - a+n; fitting in 16 bits)  + "0ffff and ;
: useIndexed?   ( a - f)  taddr @ = ; 

A : inFridge?   ( a - f)  -2 and  taddr @  -2 +wrap  = ;
B : inFridge?   ( a - f)          taddr @  -1 +wrap  = ;
  : beerRun?    ( a - f)  inFridge? not  fridgeFull @ not  or ;

A : beerRun  ( a - a a#2 b0 b1)  dup  -2 and
A    dup useIndexed? if                tgIread ( b0 b1) ^  then
A            dup tgRead  over 1 +wrap tgRead ( b0 b1) ;

B : beerRun  ( a - a +a b0 b1)
B    dup useIndexed? if  2 ( +a)       tgIread ( b0 b1) ^  then
B                  dup 1 ( +a) swap  tgRead dup ( b0 b0) ;

  : postIt  ( a +a)  +wrap taddr !  fridgeFull on ;
A : refillFridge  ( a a#2 b0 b1 - a)  fridge 1+ c!  fridge c!     2 postIt ;
B : refillFridge  ( a +a b0 b1 - b0)                fridge c!  -rot postIt ;

  : t908c@  ( a - byte)
A  dup beerRun? if  beerRun refillFridge   then  1 and fridge + c@ ;
B  dup beerRun? if  beerRun refillFridge ^ then   drop fridge   c@ ;

( Hide A and B so they don't cause trouble!)
compiler
: A  ;
: B  ;
forth
: A  \ A ;
: B  \ B ;

( Use names separate from |c@ |c! |@ |! so we have more flexibility.
  Initially the asm will want to write into the target memory _image_.
  Later, after connecting to a target, we can write to the memory image,
  and to the target, by careful patching of |<whatever.)

( I'm using long funny names. t908xx means "target 908 xx" because later,
  when I've fired up the S08 that this 908 is going to talk to, I'll need
  yet another word, so I don't want to use, eg, t@.)

: t908@ ( a - word)  dup t908c@ ( hi) 8 <<  swap 1+ t908c@ ( lo) or ;

: doWrite  ( byte a - a)
   dup useIndexed? if  swap tgIwrite ^  then  tuck tgWrite ;

: t908c!  ( byte a)  fridgeFull off ( invalidate cache)
   doWrite 1 +wrap taddr ! ;

( Once we have the target SP we can read & write the "exception stack
  frame" which contains all the 08 registers.

  readsp returns SP+1, which points _at_ - not below - the bottommost
  register. The order, low to high: H CC A X PCH PCL)

: reg  ( offset)  constant does> tsp @ + ;  ( self-index)
00 reg H
01 reg CC
02 reg A
03 reg X
04 reg PC
04 reg PCH
05 reg PCL

: .bits8  radix @ push  binary  <# # # # # # # # # #> type  pop radix ! ;
: .b  ( a)  t908c@ .h8_ ;
: .w  ( a)  t908@  .hcell_ ;
: .regs  tgReadSp tsp !  cr  ." V--HINZC  A  H  X   SP   PC"
    cr  CC t908c@ .bits8 space  \f A .b  H .b  X .b  tsp @ .hcell_  PC .w ;

: put  ( from to)  ( copy code to target)
   over -  ?for  dup |+ c@  over t908c!  1+  next  then ;

( Find out how fast the target is running.)
hex
assembler
00 constant PA    -- port A data
01 constant PB    -- port B data
04 constant PAD    -- port A direction; 0 = in, 1 = out
05 constant PBD    -- port B direction
20 constant TSC
28 constant TSC1
29 constant TCH1H
2a constant TCH1L
40 constant timerh
41 constant timerl
: --   \ -- ;
: (    \ ( ;
: [if]  \ [if] ;
: [then]  \ [then] ;
forth

( Create a macro word in current chain. Used for macro: and inline.)
: _macro   new <:> forth   macro-loop ;
: macro    assembler _macro ;
compiler
: ;m   \ ;  ;  ( returns to host forth)
assembler
: label   |here  assembler constant forth ;
forth
: code   \a label  asm ;
: \a  .assembler. chain' execute ;

50 constant start
0 0 start org

ld target/HC08/bdm.mu4
hex  ( XXX #]file resets radix)

code boot
   0140 # ldhx
   txs
   .h clr  ( data stack in zero page! H is always clear)
   -2 # ldx  ( data stack at top of zero page; 2 bytes of scratch space)

   InitBdm bsr
   0e4 ( read status) # lda   tx8 bsr   rx8 bsr
   0c4 ( write control) # lda  tx8 bsr
   88  ( ENBDM, CLKSW)  # lda  tx8 bsr  ( try to set clk to bus/2 = 4MHz)

0 [if]
   TSC ) clr  -- start timer
   10 # PB ) mov  -- set BKGD_L (PB7) to 0, BKGD_H (PB4) to 1
   80 # PBD ) mov   -- drive BKGD_L
   .a clr   begin  .a decz?  until
   10 # PBD ) mov   -- drive BKGD_H  Speedup pulse!
   08 # TSC1 ) mov   -- capture falling edge on BKGD in CH1
   PBD ) clr  -- tri-state BKGD
   begin  TSC1 7 bclr?  while
      .a dec  0= until  swi  ( timeout)  then
   TSC1 ) clr   -- reset ch 1
   TCH1H ) timerh ) mov
   TCH1L ) timerl ) mov
   04 # TSC1 ) mov   -- capture rising edge on BKGD in CH1
   .a clr
   begin  TSC1 7 bclr?  while
      .a dec  0= until  swi  ( timeout)  then
   TSC1 ) clr   -- reset ch 1
   TCH1H ) lda   .a psh  ( reading H first latches)
   TCH1L ) lda   timerl ) sub   timerl ) sta
        .a pul   timerh ) sbc   timerh ) sta
   swi
[then]
;c

: pc!  >lohi  PCH t908c!  PCL t908c! ;
: tgt  ( connect mem read to target memory)  ['] t908c@ is |c@ ;
: hi   flush  start |here put   tgt ( so du works) 
   \a boot pc!  .regs ;

: call  pc!  tgRun  .regs ;
: run   \a boot   call ;


#]file
